#ifndef BMK_BMK_NG_BMX_RELEASE_HAIKU_X64_H
#define BMK_BMK_NG_BMX_RELEASE_HAIKU_X64_H

#include <brl.mod/blitz.mod/.bmx/blitz.bmx.release.haiku.x64.h>
#include <brl.mod/filesystem.mod/.bmx/filesystem.bmx.release.haiku.x64.h>
#include <brl.mod/reflection.mod/.bmx/reflection.bmx.release.haiku.x64.h>
#include <pub.mod/freeprocess.mod/.bmx/freeprocess.bmx.release.haiku.x64.h>
#include "bmk_config.bmx.release.haiku.x64.h"
#include "bmk_ng_utils.bmx.release.haiku.x64.h"
int _bb_bmk_bmk_ng();
struct _m_bmk_ng_TBMK_obj;
struct _m_bmk_ng_TBMKGlobals_obj;
struct _m_bmk_ng_TBMKCommand_obj;
struct _m_bmk_ng_TOptionVariable_obj;
struct _m_bmk_ng_TProcessManager_obj;
struct _m_bmk_ng_TThreadPool_obj;
struct _m_bmk_ng_TThreadPoolTask_obj;
struct _m_bmk_ng_TOpt_obj;
struct _m_bmk_ng_TProcessTask_obj;
struct _m_bmk_ng_TCallback_obj;
void __m_bmk_ng_TBMK_New(struct _m_bmk_ng_TBMK_obj* o);
typedef void (*_m_bmk_ng_TBMK_Reset_m)(struct _m_bmk_ng_TBMK_obj*);
void __m_bmk_ng_TBMK_Reset(struct _m_bmk_ng_TBMK_obj*);
typedef void (*_m_bmk_ng_TBMK_LoadBMK_Si_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT);
void __m_bmk_ng_TBMK_LoadBMK_Si(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT);
typedef void (*_m_bmk_ng_TBMK_ProcessPragma_SvivSvS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT*,BBSTRING*,BBSTRING*);
void __m_bmk_ng_TBMK_ProcessPragma_SvivSvS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT*,BBSTRING*,BBSTRING*);
typedef void (*_m_bmk_ng_TBMK_ProcessLine_SvivSvS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT*,BBSTRING*,BBSTRING*);
void __m_bmk_ng_TBMK_ProcessLine_SvivSvS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBINT*,BBSTRING*,BBSTRING*);
typedef BBSTRING (*_m_bmk_ng_TBMK_Parse_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_Parse_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_FindValue_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_FindValue_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_Quote_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_Quote_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_Platform_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_Platform(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_AppType_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_AppType(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_CPU_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_CPU(struct _m_bmk_ng_TBMK_obj*);
typedef void (*_m_bmk_ng_TBMK_ToggleCPU_m)(struct _m_bmk_ng_TBMK_obj*);
void __m_bmk_ng_TBMK_ToggleCPU(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_BuildName_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_BuildName_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBINT (*_m_bmk_ng_TBMK_Sys_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBINT __m_bmk_ng_TBMK_Sys_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBINT (*_m_bmk_ng_TBMK_MultiSys_SSSS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
BBINT __m_bmk_ng_TBMK_MultiSys_SSSS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMK_ThrowNew_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
void __m_bmk_ng_TBMK_ThrowNew_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMK_Call_SaS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBARRAY);
void __m_bmk_ng_TBMK_Call_SaS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBARRAY);
typedef void (*_m_bmk_ng_TBMK_AddArg_SS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING);
void __m_bmk_ng_TBMK_AddArg_SS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_Option_SS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_Option_SS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_GCCVersion_ii_m)(struct _m_bmk_ng_TBMK_obj*,BBINT,BBINT);
BBSTRING __m_bmk_ng_TBMK_GCCVersion_ii(struct _m_bmk_ng_TBMK_obj*,BBINT,BBINT);
typedef BBSTRING (*_m_bmk_ng_TBMK_XCodeVersion_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_XCodeVersion(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_HasTarget_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBINT __m_bmk_ng_TBMK_HasTarget_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBINT (*_m_bmk_ng_TBMK_GCCVersionInt_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_GCCVersionInt(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_BCCVersion_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_BCCVersion(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_MinGWBinPath_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_MinGWBinPath(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_MinGWPath_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_MinGWPath(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_MinGWLinkPaths_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_MinGWLinkPaths(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_MinGWDLLCrtPath_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_MinGWDLLCrtPath(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_MinGWCrtPath_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_MinGWCrtPath(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_IsDebugBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_IsDebugBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_IsReleaseBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_IsReleaseBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_IsThreadedBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_IsThreadedBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_IsQuickscanBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_IsQuickscanBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_IsUniversalBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_IsUniversalBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_GetModFilter_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_GetModFilter(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_GetConfigMung_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_GetConfigMung(struct _m_bmk_ng_TBMK_obj*);
typedef BBINT (*_m_bmk_ng_TBMK_SupportsHiRes_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_SupportsHiRes(struct _m_bmk_ng_TBMK_obj*);
typedef BBOBJECT (*_m_bmk_ng_TBMK_RunCommand_SaS_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBARRAY);
BBOBJECT __m_bmk_ng_TBMK_RunCommand_SaS(struct _m_bmk_ng_TBMK_obj*,BBSTRING,BBARRAY);
typedef void (*_m_bmk_ng_TBMK_PushLog_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
void __m_bmk_ng_TBMK_PushLog_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMK_PushSource_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
void __m_bmk_ng_TBMK_PushSource_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMK_PushEcho_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
void __m_bmk_ng_TBMK_PushEcho_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_FixPaths_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_FixPaths_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMK_AppDet_m)(struct _m_bmk_ng_TBMK_obj*);
BBSTRING __m_bmk_ng_TBMK_AppDet(struct _m_bmk_ng_TBMK_obj*);
typedef void (*_m_bmk_ng_TBMK_DoCallback_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
void __m_bmk_ng_TBMK_DoCallback_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
typedef BBINT (*_m_bmk_ng_TBMK_VerboseBuild_m)(struct _m_bmk_ng_TBMK_obj*);
BBINT __m_bmk_ng_TBMK_VerboseBuild(struct _m_bmk_ng_TBMK_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMK_AppSetting_S_m)(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMK_AppSetting_S(struct _m_bmk_ng_TBMK_obj*,BBSTRING);
struct BBClass__m_bmk_ng_TBMK {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TBMK_Reset_m m_Reset;
	_m_bmk_ng_TBMK_LoadBMK_Si_m m_LoadBMK_Si;
	_m_bmk_ng_TBMK_ProcessPragma_SvivSvS_m m_ProcessPragma_SvivSvS;
	_m_bmk_ng_TBMK_ProcessLine_SvivSvS_m m_ProcessLine_SvivSvS;
	_m_bmk_ng_TBMK_Parse_S_m m_Parse_S;
	_m_bmk_ng_TBMK_FindValue_S_m m_FindValue_S;
	_m_bmk_ng_TBMK_Quote_S_m m_Quote_S;
	_m_bmk_ng_TBMK_Platform_m m_Platform;
	_m_bmk_ng_TBMK_AppType_m m_AppType;
	_m_bmk_ng_TBMK_CPU_m m_CPU;
	_m_bmk_ng_TBMK_ToggleCPU_m m_ToggleCPU;
	_m_bmk_ng_TBMK_BuildName_S_m m_BuildName_S;
	_m_bmk_ng_TBMK_Sys_S_m m_Sys_S;
	_m_bmk_ng_TBMK_MultiSys_SSSS_m m_MultiSys_SSSS;
	_m_bmk_ng_TBMK_ThrowNew_S_m m_ThrowNew_S;
	_m_bmk_ng_TBMK_Call_SaS_m m_Call_SaS;
	_m_bmk_ng_TBMK_AddArg_SS_m m_AddArg_SS;
	_m_bmk_ng_TBMK_Option_SS_m m_Option_SS;
	_m_bmk_ng_TBMK_GCCVersion_ii_m m_GCCVersion_ii;
	_m_bmk_ng_TBMK_XCodeVersion_m m_XCodeVersion;
	_m_bmk_ng_TBMK_HasTarget_S_m m_HasTarget_S;
	_m_bmk_ng_TBMK_GCCVersionInt_m m_GCCVersionInt;
	_m_bmk_ng_TBMK_BCCVersion_m m_BCCVersion;
	_m_bmk_ng_TBMK_MinGWBinPath_m m_MinGWBinPath;
	_m_bmk_ng_TBMK_MinGWPath_m m_MinGWPath;
	_m_bmk_ng_TBMK_MinGWLinkPaths_m m_MinGWLinkPaths;
	_m_bmk_ng_TBMK_MinGWDLLCrtPath_m m_MinGWDLLCrtPath;
	_m_bmk_ng_TBMK_MinGWCrtPath_m m_MinGWCrtPath;
	_m_bmk_ng_TBMK_IsDebugBuild_m m_IsDebugBuild;
	_m_bmk_ng_TBMK_IsReleaseBuild_m m_IsReleaseBuild;
	_m_bmk_ng_TBMK_IsThreadedBuild_m m_IsThreadedBuild;
	_m_bmk_ng_TBMK_IsQuickscanBuild_m m_IsQuickscanBuild;
	_m_bmk_ng_TBMK_IsUniversalBuild_m m_IsUniversalBuild;
	_m_bmk_ng_TBMK_GetModFilter_m m_GetModFilter;
	_m_bmk_ng_TBMK_GetConfigMung_m m_GetConfigMung;
	_m_bmk_ng_TBMK_SupportsHiRes_m m_SupportsHiRes;
	_m_bmk_ng_TBMK_RunCommand_SaS_m m_RunCommand_SaS;
	_m_bmk_ng_TBMK_PushLog_S_m m_PushLog_S;
	_m_bmk_ng_TBMK_PushSource_S_m m_PushSource_S;
	_m_bmk_ng_TBMK_PushEcho_S_m m_PushEcho_S;
	_m_bmk_ng_TBMK_FixPaths_S_m m_FixPaths_S;
	_m_bmk_ng_TBMK_AppDet_m m_AppDet;
	_m_bmk_ng_TBMK_DoCallback_S_m m_DoCallback_S;
	_m_bmk_ng_TBMK_VerboseBuild_m m_VerboseBuild;
	_m_bmk_ng_TBMK_AppSetting_S_m m_AppSetting_S;
};

struct _m_bmk_ng_TBMK_obj {
	struct BBClass__m_bmk_ng_TBMK* clas;
	struct brl_map_TMap_obj* __m_bmk_ng_tbmk_commands;
	struct brl_linkedlist_TList_obj* __m_bmk_ng_tbmk_buildlog;
	struct brl_linkedlist_TList_obj* __m_bmk_ng_tbmk_sourcelist;
	BBSTRING __m_bmk_ng_tbmk__mingwbinpath;
	BBSTRING __m_bmk_ng_tbmk__mingwpath;
	BBSTRING __m_bmk_ng_tbmk__mingwlinkpaths;
	BBSTRING __m_bmk_ng_tbmk__mingwdllcrtpath;
	BBSTRING __m_bmk_ng_tbmk__mingwcrtpath;
	struct _m_bmk_ng_TCallback_obj* __m_bmk_ng_tbmk_callback;
	struct brl_map_TMap_obj* __m_bmk_ng_tbmk__appsettings;
};
extern struct BBClass__m_bmk_ng_TBMK _m_bmk_ng_TBMK;
extern BBSTRING _m_bmk_ng_TBMK__target;
extern struct _m_bmk_ng_TBMK_obj* _m_bmk_ng_processor;
void __m_bmk_ng_TBMKGlobals_New(struct _m_bmk_ng_TBMKGlobals_obj* o);
typedef void (*_m_bmk_ng_TBMKGlobals_SetVar_STObject_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBOBJECT);
void __m_bmk_ng_TBMKGlobals_SetVar_STObject(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBOBJECT);
typedef BBSTRING (*_m_bmk_ng_TBMKGlobals_Get_S_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMKGlobals_Get_S(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
typedef BBOBJECT (*_m_bmk_ng_TBMKGlobals_GetRawVar_S_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
BBOBJECT __m_bmk_ng_TBMKGlobals_GetRawVar_S(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMKGlobals_GetOptionVar_SS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
BBSTRING __m_bmk_ng_TBMKGlobals_GetOptionVar_SS(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_Push_S_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
void __m_bmk_ng_TBMKGlobals_Push_S(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_Pop_S_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
void __m_bmk_ng_TBMKGlobals_Pop_S(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_PushAll_aS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBARRAY);
void __m_bmk_ng_TBMKGlobals_PushAll_aS(struct _m_bmk_ng_TBMKGlobals_obj*,BBARRAY);
typedef void (*_m_bmk_ng_TBMKGlobals_PopAll_m)(struct _m_bmk_ng_TBMKGlobals_obj*);
void __m_bmk_ng_TBMKGlobals_PopAll(struct _m_bmk_ng_TBMKGlobals_obj*);
typedef void (*_m_bmk_ng_TBMKGlobals_Add_SSi_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBINT);
void __m_bmk_ng_TBMKGlobals_Add_SSi(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBINT);
typedef void (*_m_bmk_ng_TBMKGlobals_AddC_SS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
void __m_bmk_ng_TBMKGlobals_AddC_SS(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_AddOption_SSS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBSTRING);
void __m_bmk_ng_TBMKGlobals_AddOption_SSS(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_SetOption_SSS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBSTRING);
void __m_bmk_ng_TBMKGlobals_SetOption_SSS(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_RemoveVar_SS_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
void __m_bmk_ng_TBMKGlobals_RemoveVar_SS(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_Clear_S_m)(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
void __m_bmk_ng_TBMKGlobals_Clear_S(struct _m_bmk_ng_TBMKGlobals_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TBMKGlobals_Reset_m)(struct _m_bmk_ng_TBMKGlobals_obj*);
void __m_bmk_ng_TBMKGlobals_Reset(struct _m_bmk_ng_TBMKGlobals_obj*);
typedef void (*_m_bmk_ng_TBMKGlobals_Dump_m)(struct _m_bmk_ng_TBMKGlobals_obj*);
void __m_bmk_ng_TBMKGlobals_Dump(struct _m_bmk_ng_TBMKGlobals_obj*);
struct BBClass__m_bmk_ng_TBMKGlobals {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TBMKGlobals_SetVar_STObject_m m_SetVar_STObject;
	_m_bmk_ng_TBMKGlobals_Get_S_m m_Get_S;
	_m_bmk_ng_TBMKGlobals_GetRawVar_S_m m_GetRawVar_S;
	_m_bmk_ng_TBMKGlobals_GetOptionVar_SS_m m_GetOptionVar_SS;
	_m_bmk_ng_TBMKGlobals_Push_S_m m_Push_S;
	_m_bmk_ng_TBMKGlobals_Pop_S_m m_Pop_S;
	_m_bmk_ng_TBMKGlobals_PushAll_aS_m m_PushAll_aS;
	_m_bmk_ng_TBMKGlobals_PopAll_m m_PopAll;
	_m_bmk_ng_TBMKGlobals_Add_SSi_m m_Add_SSi;
	_m_bmk_ng_TBMKGlobals_AddC_SS_m m_AddC_SS;
	_m_bmk_ng_TBMKGlobals_AddOption_SSS_m m_AddOption_SSS;
	_m_bmk_ng_TBMKGlobals_SetOption_SSS_m m_SetOption_SSS;
	_m_bmk_ng_TBMKGlobals_RemoveVar_SS_m m_RemoveVar_SS;
	_m_bmk_ng_TBMKGlobals_Clear_S_m m_Clear_S;
	_m_bmk_ng_TBMKGlobals_Reset_m m_Reset;
	_m_bmk_ng_TBMKGlobals_Dump_m m_Dump;
};

struct _m_bmk_ng_TBMKGlobals_obj {
	struct BBClass__m_bmk_ng_TBMKGlobals* clas;
	struct brl_map_TMap_obj* __m_bmk_ng_tbmkglobals_vars;
	struct brl_map_TMap_obj* __m_bmk_ng_tbmkglobals_stack;
};
extern struct BBClass__m_bmk_ng_TBMKGlobals _m_bmk_ng_TBMKGlobals;
extern struct _m_bmk_ng_TBMKGlobals_obj* _m_bmk_ng_globals;
void __m_bmk_ng_TBMKCommand_New(struct _m_bmk_ng_TBMKCommand_obj* o);
typedef void (*_m_bmk_ng_TBMKCommand_LoadCommand_S_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
void __m_bmk_ng_TBMKCommand_LoadCommand_S(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
typedef BBOBJECT (*_m_bmk_ng_TBMKCommand_RunCommand_S_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
BBOBJECT __m_bmk_ng_TBMKCommand_RunCommand_S(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
typedef BBOBJECT (*_m_bmk_ng_TBMKCommand_RunCommandArgs_aTObject_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBARRAY);
BBOBJECT __m_bmk_ng_TBMKCommand_RunCommandArgs_aTObject(struct _m_bmk_ng_TBMKCommand_obj*,BBARRAY);
typedef BBARRAY (*_m_bmk_ng_TBMKCommand_ExtractArgs_S_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
BBARRAY __m_bmk_ng_TBMKCommand_ExtractArgs_S(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMKCommand_ParseArgs_S_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMKCommand_ParseArgs_S(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TBMKCommand_GetArgs_m)(struct _m_bmk_ng_TBMKCommand_obj*);
BBSTRING __m_bmk_ng_TBMKCommand_GetArgs(struct _m_bmk_ng_TBMKCommand_obj*);
typedef BBSTRING (*_m_bmk_ng_TBMKCommand_WrapVariables_S_m)(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TBMKCommand_WrapVariables_S(struct _m_bmk_ng_TBMKCommand_obj*,BBSTRING);
struct BBClass__m_bmk_ng_TBMKCommand {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TBMKCommand_LoadCommand_S_m m_LoadCommand_S;
	_m_bmk_ng_TBMKCommand_RunCommand_S_m m_RunCommand_S;
	_m_bmk_ng_TBMKCommand_RunCommandArgs_aTObject_m m_RunCommandArgs_aTObject;
	_m_bmk_ng_TBMKCommand_ExtractArgs_S_m m_ExtractArgs_S;
	_m_bmk_ng_TBMKCommand_ParseArgs_S_m m_ParseArgs_S;
	_m_bmk_ng_TBMKCommand_GetArgs_m m_GetArgs;
	_m_bmk_ng_TBMKCommand_WrapVariables_S_m m_WrapVariables_S;
};

struct _m_bmk_ng_TBMKCommand_obj {
	struct BBClass__m_bmk_ng_TBMKCommand* clas;
	BBSTRING __m_bmk_ng_tbmkcommand_name;
	BBSTRING __m_bmk_ng_tbmkcommand_command;
	BBINT __m_bmk_ng_tbmkcommand_argcount;
	struct brl_maxlua_TLuaClass_obj* __m_bmk_ng_tbmkcommand_class;
	struct brl_maxlua_TLuaObject_obj* __m_bmk_ng_tbmkcommand_instance;
};
extern struct BBClass__m_bmk_ng_TBMKCommand _m_bmk_ng_TBMKCommand;
void _m_bmk_ng_LoadBMK(BBSTRING bbt_path,BBINT bbt_required);
void __m_bmk_ng_TOptionVariable_New(struct _m_bmk_ng_TOptionVariable_obj* o);
BBSTRING __m_bmk_ng_TOptionVariable_ToString(struct _m_bmk_ng_TOptionVariable_obj* o);
typedef void (*_m_bmk_ng_TOptionVariable_AddVar_SS_m)(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING,BBSTRING);
void __m_bmk_ng_TOptionVariable_AddVar_SS(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING,BBSTRING);
typedef void (*_m_bmk_ng_TOptionVariable_SetVar_SS_m)(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING,BBSTRING);
void __m_bmk_ng_TOptionVariable_SetVar_SS(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING,BBSTRING);
typedef BBSTRING (*_m_bmk_ng_TOptionVariable_GetVar_S_m)(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING);
BBSTRING __m_bmk_ng_TOptionVariable_GetVar_S(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING);
typedef void (*_m_bmk_ng_TOptionVariable_RemoveVar_S_m)(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING);
void __m_bmk_ng_TOptionVariable_RemoveVar_S(struct _m_bmk_ng_TOptionVariable_obj*,BBSTRING);
typedef struct _m_bmk_ng_TOptionVariable_obj* (*_m_bmk_ng_TOptionVariable_Clone_m)(struct _m_bmk_ng_TOptionVariable_obj*);
struct _m_bmk_ng_TOptionVariable_obj* __m_bmk_ng_TOptionVariable_Clone(struct _m_bmk_ng_TOptionVariable_obj*);
struct BBClass__m_bmk_ng_TOptionVariable {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TOptionVariable_AddVar_SS_m m_AddVar_SS;
	_m_bmk_ng_TOptionVariable_SetVar_SS_m m_SetVar_SS;
	_m_bmk_ng_TOptionVariable_GetVar_S_m m_GetVar_S;
	_m_bmk_ng_TOptionVariable_RemoveVar_S_m m_RemoveVar_S;
	_m_bmk_ng_TOptionVariable_Clone_m m_Clone;
};

struct _m_bmk_ng_TOptionVariable_obj {
	struct BBClass__m_bmk_ng_TOptionVariable* clas;
	struct brl_map_TMap_obj* __m_bmk_ng_toptionvariable_options;
	struct brl_linkedlist_TList_obj* __m_bmk_ng_toptionvariable_orderedoptions;
};
extern struct BBClass__m_bmk_ng_TOptionVariable _m_bmk_ng_TOptionVariable;
void __m_bmk_ng_TProcessManager_New(struct _m_bmk_ng_TProcessManager_obj* o);
typedef void (*_m_bmk_ng_TProcessManager_CheckTasks_m)(struct _m_bmk_ng_TProcessManager_obj*);
void __m_bmk_ng_TProcessManager_CheckTasks(struct _m_bmk_ng_TProcessManager_obj*);
typedef void (*_m_bmk_ng_TProcessManager_WaitForTasks_m)(struct _m_bmk_ng_TProcessManager_obj*);
void __m_bmk_ng_TProcessManager_WaitForTasks(struct _m_bmk_ng_TProcessManager_obj*);
typedef void (*_m_bmk_ng_TProcessManager_DoSystem_SSSS_m)(struct _m_bmk_ng_TProcessManager_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
void __m_bmk_ng_TProcessManager_DoSystem_SSSS(struct _m_bmk_ng_TProcessManager_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
typedef BBINT (*_m_bmk_ng_TProcessManager_AddTask_F_TObject_TObject_TObject_m)(struct _m_bmk_ng_TProcessManager_obj*,BBOBJECT(* bbt_func)(BBOBJECT),BBOBJECT);
BBINT __m_bmk_ng_TProcessManager_AddTask_F_TObject_TObject_TObject(struct _m_bmk_ng_TProcessManager_obj*,BBOBJECT(* bbt_func)(BBOBJECT),BBOBJECT);
struct BBClass__m_bmk_ng_TProcessManager {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TProcessManager_CheckTasks_m m_CheckTasks;
	_m_bmk_ng_TProcessManager_WaitForTasks_m m_WaitForTasks;
	_m_bmk_ng_TProcessManager_DoSystem_SSSS_m m_DoSystem_SSSS;
	_m_bmk_ng_TProcessManager_AddTask_F_TObject_TObject_TObject_m m_AddTask_F_TObject_TObject_TObject;
};

struct _m_bmk_ng_TProcessManager_obj {
	struct BBClass__m_bmk_ng_TProcessManager* clas;
	struct _m_bmk_ng_TThreadPool_obj* __m_bmk_ng_tprocessmanager_pool;
	BBINT __m_bmk_ng_tprocessmanager_cpucount;
	struct brl_linkedlist_TList_obj* __m_bmk_ng_tprocessmanager_threads;
};
extern struct BBClass__m_bmk_ng_TProcessManager _m_bmk_ng_TProcessManager;
extern struct _m_bmk_ng_TProcessManager_obj* _m_bmk_ng_processManager;
void __m_bmk_ng_TThreadPool_New(struct _m_bmk_ng_TThreadPool_obj* o);
void __m_bmk_ng_TThreadPool_Delete(struct _m_bmk_ng_TThreadPool_obj* o);
typedef struct _m_bmk_ng_TThreadPool_obj* (*_m_bmk_ng_TThreadPool_Create_TTThreadPool_ii_f)(BBINT,BBINT);
struct _m_bmk_ng_TThreadPool_obj* _m_bmk_ng_TThreadPool_Create_TTThreadPool_ii(BBINT,BBINT);
typedef BBINT (*_m_bmk_ng_TThreadPool_Count_m)(struct _m_bmk_ng_TThreadPool_obj*);
BBINT __m_bmk_ng_TThreadPool_Count(struct _m_bmk_ng_TThreadPool_obj*);
typedef BBINT (*_m_bmk_ng_TThreadPool_Size_m)(struct _m_bmk_ng_TThreadPool_obj*);
BBINT __m_bmk_ng_TThreadPool_Size(struct _m_bmk_ng_TThreadPool_obj*);
typedef BBINT (*_m_bmk_ng_TThreadPool_Running_m)(struct _m_bmk_ng_TThreadPool_obj*);
BBINT __m_bmk_ng_TThreadPool_Running(struct _m_bmk_ng_TThreadPool_obj*);
typedef BBINT (*_m_bmk_ng_TThreadPool_AddTask_F_TObject_TObject_TObject_m)(struct _m_bmk_ng_TThreadPool_obj*,BBOBJECT(* bbt_func)(BBOBJECT),BBOBJECT);
BBINT __m_bmk_ng_TThreadPool_AddTask_F_TObject_TObject_TObject(struct _m_bmk_ng_TThreadPool_obj*,BBOBJECT(* bbt_func)(BBOBJECT),BBOBJECT);
typedef void (*_m_bmk_ng_TThreadPool_Shutdown_i_m)(struct _m_bmk_ng_TThreadPool_obj*,BBINT);
void __m_bmk_ng_TThreadPool_Shutdown_i(struct _m_bmk_ng_TThreadPool_obj*,BBINT);
typedef BBOBJECT (*_m_bmk_ng_TThreadPool__ThreadPoolThread_TObject_TObject_f)(BBOBJECT);
BBOBJECT _m_bmk_ng_TThreadPool__ThreadPoolThread_TObject_TObject(BBOBJECT);
struct BBClass__m_bmk_ng_TThreadPool {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TThreadPool_Create_TTThreadPool_ii_f f_Create_TTThreadPool_ii;
	_m_bmk_ng_TThreadPool_Count_m m_Count;
	_m_bmk_ng_TThreadPool_Size_m m_Size;
	_m_bmk_ng_TThreadPool_Running_m m_Running;
	_m_bmk_ng_TThreadPool_AddTask_F_TObject_TObject_TObject_m m_AddTask_F_TObject_TObject_TObject;
	_m_bmk_ng_TThreadPool_Shutdown_i_m m_Shutdown_i;
	_m_bmk_ng_TThreadPool__ThreadPoolThread_TObject_TObject_f f__ThreadPoolThread_TObject_TObject;
};

struct _m_bmk_ng_TThreadPool_obj {
	struct BBClass__m_bmk_ng_TThreadPool* clas;
	BBARRAY __m_bmk_ng_tthreadpool__threads;
	BBARRAY __m_bmk_ng_tthreadpool__queue;
	struct brl_threads_TMutex_obj* __m_bmk_ng_tthreadpool__lock;
	struct brl_threads_TCondVar_obj* __m_bmk_ng_tthreadpool__waitvar;
	BBINT __m_bmk_ng_tthreadpool__count;
	BBINT __m_bmk_ng_tthreadpool__head;
	BBINT __m_bmk_ng_tthreadpool__tail;
	BBINT __m_bmk_ng_tthreadpool__running;
	BBINT __m_bmk_ng_tthreadpool__shutdown;
};
extern struct BBClass__m_bmk_ng_TThreadPool _m_bmk_ng_TThreadPool;
void __m_bmk_ng_TThreadPoolTask_New(struct _m_bmk_ng_TThreadPoolTask_obj* o);
struct BBClass__m_bmk_ng_TThreadPoolTask {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
};

struct _m_bmk_ng_TThreadPoolTask_obj {
	struct BBClass__m_bmk_ng_TThreadPoolTask* clas;
	BBOBJECT(* __m_bmk_ng_tthreadpooltask_func)(BBOBJECT);
	BBOBJECT __m_bmk_ng_tthreadpooltask_data;
};
extern struct BBClass__m_bmk_ng_TThreadPoolTask _m_bmk_ng_TThreadPoolTask;
void __m_bmk_ng_TOpt_New(struct _m_bmk_ng_TOpt_obj* o);
struct BBClass__m_bmk_ng_TOpt {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
};

struct _m_bmk_ng_TOpt_obj {
	struct BBClass__m_bmk_ng_TOpt* clas;
	BBSTRING __m_bmk_ng_topt_name;
	BBSTRING __m_bmk_ng_topt_value;
};
extern struct BBClass__m_bmk_ng_TOpt _m_bmk_ng_TOpt;
void __m_bmk_ng_TProcessTask_New(struct _m_bmk_ng_TProcessTask_obj* o);
typedef struct _m_bmk_ng_TProcessTask_obj* (*_m_bmk_ng_TProcessTask_Create_SSSS_m)(struct _m_bmk_ng_TProcessTask_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
struct _m_bmk_ng_TProcessTask_obj* __m_bmk_ng_TProcessTask_Create_SSSS(struct _m_bmk_ng_TProcessTask_obj*,BBSTRING,BBSTRING,BBSTRING,BBSTRING);
typedef BBOBJECT (*_m_bmk_ng_TProcessTask__DoTasks_TObject_TObject_f)(BBOBJECT);
BBOBJECT _m_bmk_ng_TProcessTask__DoTasks_TObject_TObject(BBOBJECT);
typedef BBOBJECT (*_m_bmk_ng_TProcessTask_DoTasks_m)(struct _m_bmk_ng_TProcessTask_obj*);
BBOBJECT __m_bmk_ng_TProcessTask_DoTasks(struct _m_bmk_ng_TProcessTask_obj*);
struct BBClass__m_bmk_ng_TProcessTask {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TProcessTask_Create_SSSS_m m_Create_SSSS;
	_m_bmk_ng_TProcessTask__DoTasks_TObject_TObject_f f__DoTasks_TObject_TObject;
	_m_bmk_ng_TProcessTask_DoTasks_m m_DoTasks;
};

struct _m_bmk_ng_TProcessTask_obj {
	struct BBClass__m_bmk_ng_TProcessTask* clas;
	BBSTRING __m_bmk_ng_tprocesstask_command;
	BBSTRING __m_bmk_ng_tprocesstask_source;
	BBSTRING __m_bmk_ng_tprocesstask_obj;
	BBSTRING __m_bmk_ng_tprocesstask_supp;
};
extern struct BBClass__m_bmk_ng_TProcessTask _m_bmk_ng_TProcessTask;
void __m_bmk_ng_TCallback_New(struct _m_bmk_ng_TCallback_obj* o);
typedef void (*_m_bmk_ng_TCallback_DoCallback_S_m)(struct _m_bmk_ng_TCallback_obj*,BBSTRING);
void __m_bmk_ng_TCallback_DoCallback_S(struct _m_bmk_ng_TCallback_obj*,BBSTRING);
struct BBClass__m_bmk_ng_TCallback {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_ng_TCallback_DoCallback_S_m m_DoCallback_S;
};

struct _m_bmk_ng_TCallback_obj {
	struct BBClass__m_bmk_ng_TCallback* clas;
};
extern struct BBClass__m_bmk_ng_TCallback _m_bmk_ng_TCallback;
extern BBINT bmx_system(BBBYTE* bbt_cmd);

#endif
