#ifndef BMK_BMK_UTIL_BMX_RELEASE_HAIKU_X64_H
#define BMK_BMK_UTIL_BMX_RELEASE_HAIKU_X64_H

#include <brl.mod/blitz.mod/.bmx/blitz.bmx.release.haiku.x64.h>
#include <brl.mod/filesystem.mod/.bmx/filesystem.bmx.release.haiku.x64.h>
#include "bmk_config.bmx.release.haiku.x64.h"
#include "bmk_ng.bmx.release.haiku.x64.h"
int _bb_bmk_bmk_util();
struct _m_bmk_util_TModOpt_obj;
struct _m_bmk_util_TStringStack_obj;
struct _m_bmk_util_TFileId_obj;
struct _m_bmk_util_TFileMap_obj;
struct _m_bmk_util_TOrderedMap_obj;
struct _m_bmk_util_TBootstrapConfig_obj;
struct _m_bmk_util_TBootstrapAsset_obj;
struct _m_bmk_util_TBootstrapTarget_obj;
struct _m_bmk_util_TFileHash_obj;
void __m_bmk_util_TModOpt_New(struct _m_bmk_util_TModOpt_obj* o);
typedef void (*_m_bmk_util_TModOpt_addOption_SS_m)(struct _m_bmk_util_TModOpt_obj*,BBSTRING,BBSTRING);
void __m_bmk_util_TModOpt_addOption_SS(struct _m_bmk_util_TModOpt_obj*,BBSTRING,BBSTRING);
typedef BBINT (*_m_bmk_util_TModOpt_hasCCopt_S_m)(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
BBINT __m_bmk_util_TModOpt_hasCCopt_S(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
typedef BBINT (*_m_bmk_util_TModOpt_hasCPPopt_S_m)(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
BBINT __m_bmk_util_TModOpt_hasCPPopt_S(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
typedef BBINT (*_m_bmk_util_TModOpt_hasCopt_S_m)(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
BBINT __m_bmk_util_TModOpt_hasCopt_S(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
typedef BBINT (*_m_bmk_util_TModOpt_hasLDopt_S_m)(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
BBINT __m_bmk_util_TModOpt_hasLDopt_S(struct _m_bmk_util_TModOpt_obj*,BBSTRING);
typedef BBSTRING (*_m_bmk_util_TModOpt_setPath_S_SS_f)(BBSTRING,BBSTRING);
BBSTRING _m_bmk_util_TModOpt_setPath_S_SS(BBSTRING,BBSTRING);
struct BBClass__m_bmk_util_TModOpt {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_util_TModOpt_addOption_SS_m m_addOption_SS;
	_m_bmk_util_TModOpt_hasCCopt_S_m m_hasCCopt_S;
	_m_bmk_util_TModOpt_hasCPPopt_S_m m_hasCPPopt_S;
	_m_bmk_util_TModOpt_hasCopt_S_m m_hasCopt_S;
	_m_bmk_util_TModOpt_hasLDopt_S_m m_hasLDopt_S;
	_m_bmk_util_TModOpt_setPath_S_SS_f f_setPath_S_SS;
};

struct _m_bmk_util_TModOpt_obj {
	struct BBClass__m_bmk_util_TModOpt* clas;
	BBSTRING __m_bmk_util_tmodopt_cc_opts;
	struct brl_linkedlist_TList_obj* __m_bmk_util_tmodopt_ld_opts;
	BBSTRING __m_bmk_util_tmodopt_cpp_opts;
	BBSTRING __m_bmk_util_tmodopt_c_opts;
};
extern struct BBClass__m_bmk_util_TModOpt _m_bmk_util_TModOpt;
extern struct _m_bmk_util_TModOpt_obj* _m_bmk_util_mod_opts;
void __m_bmk_util_TStringStack_New(struct _m_bmk_util_TStringStack_obj* o);
void __m_bmk_util_TStringStack_Delete(struct _m_bmk_util_TStringStack_obj* o);
typedef BBSTRING (*_m_bmk_util_TStringStack_Join_S_m)(struct _m_bmk_util_TStringStack_obj*,BBSTRING);
BBSTRING __m_bmk_util_TStringStack_Join_S(struct _m_bmk_util_TStringStack_obj*,BBSTRING);
struct BBClass__m_bmk_util_TStringStack {
	struct BBClass_brl_linkedlist_TList*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_linkedlist_TList__pad_m m__pad;
	brl_linkedlist_TList_Clear_m m_Clear;
	brl_linkedlist_TList_IsEmpty_m m_IsEmpty;
	brl_linkedlist_TList_Contains_TObject_m m_Contains_TObject;
	brl_linkedlist_TList_AddFirst_TObject_m m_AddFirst_TObject;
	brl_linkedlist_TList_AddLast_TObject_m m_AddLast_TObject;
	brl_linkedlist_TList_First_m m_First;
	brl_linkedlist_TList_Last_m m_Last;
	brl_linkedlist_TList_RemoveFirst_m m_RemoveFirst;
	brl_linkedlist_TList_RemoveLast_m m_RemoveLast;
	brl_linkedlist_TList_FirstLink_m m_FirstLink;
	brl_linkedlist_TList_LastLink_m m_LastLink;
	brl_linkedlist_TList_InsertBeforeLink_TObjectTTLink_m m_InsertBeforeLink_TObjectTTLink;
	brl_linkedlist_TList_InsertAfterLink_TObjectTTLink_m m_InsertAfterLink_TObjectTTLink;
	brl_linkedlist_TList_FindLink_TObject_m m_FindLink_TObject;
	brl_linkedlist_TList_ValueAtIndex_i_m m_ValueAtIndex_i;
	brl_linkedlist_TList_Count_m m_Count;
	brl_linkedlist_TList_Remove_TObject_m m_Remove_TObject;
	brl_linkedlist_TList_Swap_TTList_m m_Swap_TTList;
	brl_linkedlist_TList_Copy_m m_Copy;
	brl_linkedlist_TList_Reverse_m m_Reverse;
	brl_linkedlist_TList_Reversed_m m_Reversed;
	brl_linkedlist_TList_Sort_iF_TObjectTObject_i__m m_Sort_iF_TObjectTObject_i_;
	brl_linkedlist_TList_ObjectEnumerator_m m_ObjectEnumerator;
	brl_linkedlist_TList_ToArray_m m_ToArray;
	brl_linkedlist_TList_FromArray_TTList_aTObject_f f_FromArray_TTList_aTObject;
	brl_linkedlist_TList_RemoveLink_TTLink_m m_RemoveLink_TTLink;
	_m_bmk_util_TStringStack_Join_S_m m_Join_S;
};

struct _m_bmk_util_TStringStack_obj {
	struct BBClass__m_bmk_util_TStringStack* clas;
	struct brl_linkedlist_TLink_obj* _brl_linkedlist_tlist__head;
	BBINT _brl_linkedlist_tlist__count;
};
extern struct BBClass__m_bmk_util_TStringStack _m_bmk_util_TStringStack;
void __m_bmk_util_TFileId_New(struct _m_bmk_util_TFileId_obj* o);
struct BBClass__m_bmk_util_TFileId {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
};

struct _m_bmk_util_TFileId_obj {
	struct BBClass__m_bmk_util_TFileId* clas;
	BBSTRING __m_bmk_util_tfileid_path;
	BBSTRING __m_bmk_util_tfileid_id;
	BBINT __m_bmk_util_tfileid_kind;
};
extern struct BBClass__m_bmk_util_TFileId _m_bmk_util_TFileId;
void __m_bmk_util_TFileMap_New(struct _m_bmk_util_TFileMap_obj* o);
typedef BBSTRING (*_m_bmk_util_TFileMap_FileId_SSii_m)(struct _m_bmk_util_TFileMap_obj*,BBSTRING,BBSTRING,BBINT,BBINT);
BBSTRING __m_bmk_util_TFileMap_FileId_SSii(struct _m_bmk_util_TFileMap_obj*,BBSTRING,BBSTRING,BBINT,BBINT);
typedef struct _m_bmk_util_TFileId_obj* (*_m_bmk_util_TFileMap_GetBuildFileIdForPath_S_m)(struct _m_bmk_util_TFileMap_obj*,BBSTRING);
struct _m_bmk_util_TFileId_obj* __m_bmk_util_TFileMap_GetBuildFileIdForPath_S(struct _m_bmk_util_TFileMap_obj*,BBSTRING);
struct BBClass__m_bmk_util_TFileMap {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_util_TFileMap_FileId_SSii_m m_FileId_SSii;
	_m_bmk_util_TFileMap_GetBuildFileIdForPath_S_m m_GetBuildFileIdForPath_S;
};

struct _m_bmk_util_TFileMap_obj {
	struct BBClass__m_bmk_util_TFileMap* clas;
	BBINT __m_bmk_util_tfilemap_lastid;
	struct brl_map_TMap_obj* __m_bmk_util_tfilemap_reffiles;
	struct brl_linkedlist_TList_obj* __m_bmk_util_tfilemap_buildfiles;
};
extern struct BBClass__m_bmk_util_TFileMap _m_bmk_util_TFileMap;
void __m_bmk_util_TOrderedMap_New(struct _m_bmk_util_TOrderedMap_obj* o);
typedef void (*_m_bmk_util_TOrderedMap_Insert_TObjectTObject_m)(struct _m_bmk_util_TOrderedMap_obj*,BBOBJECT,BBOBJECT);
void __m_bmk_util_TOrderedMap_Insert_TObjectTObject(struct _m_bmk_util_TOrderedMap_obj*,BBOBJECT,BBOBJECT);
typedef BBINT (*_m_bmk_util_TOrderedMap_Remove_TObject_m)(struct _m_bmk_util_TOrderedMap_obj*,BBOBJECT);
BBINT __m_bmk_util_TOrderedMap_Remove_TObject(struct _m_bmk_util_TOrderedMap_obj*,BBOBJECT);
typedef struct brl_linkedlist_TList_obj* (*_m_bmk_util_TOrderedMap_OrderedKeys_m)(struct _m_bmk_util_TOrderedMap_obj*);
struct brl_linkedlist_TList_obj* __m_bmk_util_TOrderedMap_OrderedKeys(struct _m_bmk_util_TOrderedMap_obj*);
struct BBClass__m_bmk_util_TOrderedMap {
	struct BBClass_brl_map_TMap*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_map_TMap_Clear_m m_Clear;
	brl_map_TMap_IsEmpty_m m_IsEmpty;
	_m_bmk_util_TOrderedMap_Insert_TObjectTObject_m m_Insert_TObjectTObject;
	brl_map_TMap_Contains_TObject_m m_Contains_TObject;
	brl_map_TMap_ValueForKey_TObject_m m_ValueForKey_TObject;
	_m_bmk_util_TOrderedMap_Remove_TObject_m m_Remove_TObject;
	brl_map_TMap_Keys_m m_Keys;
	brl_map_TMap_Values_m m_Values;
	brl_map_TMap_Copy_m m_Copy;
	brl_map_TMap_ObjectEnumerator_m m_ObjectEnumerator;
	brl_map_TMap__FirstNode_m m__FirstNode;
	brl_map_TMap__LastNode_m m__LastNode;
	brl_map_TMap__FindNode_TObject_m m__FindNode_TObject;
	brl_map_TMap__RemoveNode_TTNode_m m__RemoveNode_TTNode;
	brl_map_TMap__InsertFixup_TTNode_m m__InsertFixup_TTNode;
	brl_map_TMap__RotateLeft_TTNode_m m__RotateLeft_TTNode;
	brl_map_TMap__RotateRight_TTNode_m m__RotateRight_TTNode;
	brl_map_TMap__DeleteFixup_TTNodeTTNode_m m__DeleteFixup_TTNodeTTNode;
	brl_map_TMap__iget_TObject_m m__iget_TObject;
	brl_map_TMap__iset_TObjectTObject_m m__iset_TObjectTObject;
	_m_bmk_util_TOrderedMap_OrderedKeys_m m_OrderedKeys;
};

struct _m_bmk_util_TOrderedMap_obj {
	struct BBClass__m_bmk_util_TOrderedMap* clas;
	struct brl_map_TNode_obj* _brl_map_tmap__root;
	struct brl_linkedlist_TList_obj* __m_bmk_util_torderedmap__keys;
};
extern struct BBClass__m_bmk_util_TOrderedMap _m_bmk_util_TOrderedMap;
void __m_bmk_util_TBootstrapConfig_New(struct _m_bmk_util_TBootstrapConfig_obj* o);
typedef void (*_m_bmk_util_TBootstrapConfig_CopyAssets_S_m)(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING);
void __m_bmk_util_TBootstrapConfig_CopyAssets_S(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING);
typedef void (*_m_bmk_util_TBootstrapConfig_DirCopy_SS_m)(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,BBSTRING);
void __m_bmk_util_TBootstrapConfig_DirCopy_SS(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,BBSTRING);
typedef void (*_m_bmk_util_TBootstrapConfig_FileCopy_SSS_m)(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,BBSTRING,BBSTRING);
void __m_bmk_util_TBootstrapConfig_FileCopy_SSS(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,BBSTRING,BBSTRING);
typedef void (*_m_bmk_util_TBootstrapConfig_CopySources_STTList_m)(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,struct brl_linkedlist_TList_obj*);
void __m_bmk_util_TBootstrapConfig_CopySources_STTList(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,struct brl_linkedlist_TList_obj*);
typedef void (*_m_bmk_util_TBootstrapConfig_CopyScripts_STTBootstrapAsset_m)(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,struct _m_bmk_util_TBootstrapAsset_obj*);
void __m_bmk_util_TBootstrapConfig_CopyScripts_STTBootstrapAsset(struct _m_bmk_util_TBootstrapConfig_obj*,BBSTRING,struct _m_bmk_util_TBootstrapAsset_obj*);
struct BBClass__m_bmk_util_TBootstrapConfig {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_util_TBootstrapConfig_CopyAssets_S_m m_CopyAssets_S;
	_m_bmk_util_TBootstrapConfig_DirCopy_SS_m m_DirCopy_SS;
	_m_bmk_util_TBootstrapConfig_FileCopy_SSS_m m_FileCopy_SSS;
	_m_bmk_util_TBootstrapConfig_CopySources_STTList_m m_CopySources_STTList;
	_m_bmk_util_TBootstrapConfig_CopyScripts_STTBootstrapAsset_m m_CopyScripts_STTBootstrapAsset;
};

struct _m_bmk_util_TBootstrapConfig_obj {
	struct BBClass__m_bmk_util_TBootstrapConfig* clas;
	BBARRAY __m_bmk_util_tbootstrapconfig_assets;
	BBARRAY __m_bmk_util_tbootstrapconfig_targets;
};
extern struct BBClass__m_bmk_util_TBootstrapConfig _m_bmk_util_TBootstrapConfig;
void __m_bmk_util_TBootstrapAsset_New(struct _m_bmk_util_TBootstrapAsset_obj* o);
struct BBClass__m_bmk_util_TBootstrapAsset {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
};

struct _m_bmk_util_TBootstrapAsset_obj {
	struct BBClass__m_bmk_util_TBootstrapAsset* clas;
	BBSTRING __m_bmk_util_tbootstrapasset_assettype;
	BBSTRING __m_bmk_util_tbootstrapasset_name;
	BBARRAY __m_bmk_util_tbootstrapasset_parts;
};
extern struct BBClass__m_bmk_util_TBootstrapAsset _m_bmk_util_TBootstrapAsset;
void __m_bmk_util_TBootstrapTarget_New(struct _m_bmk_util_TBootstrapTarget_obj* o);
struct BBClass__m_bmk_util_TBootstrapTarget {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
};

struct _m_bmk_util_TBootstrapTarget_obj {
	struct BBClass__m_bmk_util_TBootstrapTarget* clas;
	BBSTRING __m_bmk_util_tbootstraptarget_platform;
	BBSTRING __m_bmk_util_tbootstraptarget_arch;
};
extern struct BBClass__m_bmk_util_TBootstrapTarget _m_bmk_util_TBootstrapTarget;
void __m_bmk_util_TFileHash_New(struct _m_bmk_util_TFileHash_obj* o);
typedef struct _m_bmk_util_TFileHash_obj* (*_m_bmk_util_TFileHash_Create_m)(struct _m_bmk_util_TFileHash_obj*);
struct _m_bmk_util_TFileHash_obj* __m_bmk_util_TFileHash_Create(struct _m_bmk_util_TFileHash_obj*);
typedef BBSTRING (*_m_bmk_util_TFileHash_CalculateHash_TTStream_m)(struct _m_bmk_util_TFileHash_obj*,struct brl_stream_TStream_obj*);
BBSTRING __m_bmk_util_TFileHash_CalculateHash_TTStream(struct _m_bmk_util_TFileHash_obj*,struct brl_stream_TStream_obj*);
typedef void (*_m_bmk_util_TFileHash_Free_m)(struct _m_bmk_util_TFileHash_obj*);
void __m_bmk_util_TFileHash_Free(struct _m_bmk_util_TFileHash_obj*);
struct BBClass__m_bmk_util_TFileHash {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	_m_bmk_util_TFileHash_Create_m m_Create;
	_m_bmk_util_TFileHash_CalculateHash_TTStream_m m_CalculateHash_TTStream;
	_m_bmk_util_TFileHash_Free_m m_Free;
};

struct _m_bmk_util_TFileHash_obj {
	struct BBClass__m_bmk_util_TFileHash* clas;
	BBBYTE* __m_bmk_util_tfilehash_stateptr;
};
extern struct BBClass__m_bmk_util_TFileHash _m_bmk_util_TFileHash;
BBINT _m_bmk_util_Match(BBSTRING bbt_ext,BBSTRING bbt_pat);
BBSTRING _m_bmk_util_HTTPEsc(BBSTRING bbt_t);
BBINT _m_bmk_util_Sys(BBSTRING bbt_cmd);
void _m_bmk_util_Ranlib(BBSTRING bbt_dir);
void _m_bmk_util_Assemble(BBSTRING bbt_src,BBSTRING bbt_obj);
void _m_bmk_util_AssembleNative(BBSTRING bbt_src,BBSTRING bbt_obj);
void _m_bmk_util_Fasm2As(BBSTRING bbt_src,BBSTRING bbt_obj);
void _m_bmk_util_CompileC(BBSTRING bbt_src,BBSTRING bbt_obj,BBSTRING bbt_opts);
void _m_bmk_util_CompileBMX(BBSTRING bbt_src,BBSTRING bbt_obj,BBSTRING bbt_opts);
void _m_bmk_util_CreateMergeArc(BBSTRING bbt_path,BBSTRING bbt_arc_path);
BBARRAY _m_bmk_util_SplitPaths(BBSTRING bbt_paths);
BBSTRING _m_bmk_util_iOSProjectClean(BBSTRING bbt_Text,BBSTRING bbt_uuid);
BBINT _m_bmk_util_FindEOL(BBSTRING bbt_Text,BBSTRING bbt_substr,BBINT bbt_start);
BBSTRING _m_bmk_util_iOSProjectBuildFiles(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectFileRefs(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectFrameworksBuildPhase(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectResourcesBuildPhase(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectResourcesGroup(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectFrameworksGroup(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectLibsGroup(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectObjectsGroup(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectLibSearchPaths(BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSProjectAppendFiles(BBSTRING bbt_Text,BBSTRING bbt_uuid,struct _m_bmk_util_TFileMap_obj* bbt_fileMap);
BBSTRING _m_bmk_util_iOSFixAppId(BBSTRING bbt_id);
void _m_bmk_util_iOSCopyDefaultFiles(BBSTRING bbt_templatePath,BBSTRING bbt_appPath);
void _m_bmk_util_PackageIOSApp(BBSTRING bbt_path,struct brl_linkedlist_TList_obj* bbt_lnk_files,BBSTRING bbt_opts);
BBSTRING _m_bmk_util_GetAndroidArch();
BBSTRING _m_bmk_util_AndroidSTLPortDir();
BBSTRING _m_bmk_util_NXLibDir();
void _m_bmk_util_LinkApp(BBSTRING bbt_path,struct brl_linkedlist_TList_obj* bbt_lnk_files,BBINT bbt_makelib,BBSTRING bbt_opts);
void _m_bmk_util_MergeApp(BBSTRING bbt_file1,BBSTRING bbt_file2,BBSTRING bbt_outputFile);
BBSTRING _m_bmk_util_PathFromPackage(BBSTRING bbt_package);
BBSTRING _m_bmk_util_ReplaceEnv(BBSTRING bbt_str,struct brl_map_TMap_obj* bbt_settings);
void _m_bmk_util_MergeFile(BBSTRING bbt_dir,BBSTRING bbt_file,struct brl_map_TMap_obj* bbt_settings);
BBSTRING _m_bmk_util_ReplaceBlock(BBSTRING bbt_Text,BBSTRING bbt_tag,BBSTRING bbt_repText,BBSTRING bbt_mark);
BBSTRING _m_bmk_util_GetAndroidLibImports();
void _m_bmk_util_CopyAndroidResources(BBSTRING bbt_buildDir,BBSTRING bbt_assetsDir);
void _m_bmk_util_DeployAndroidProject();
BBSTRING _m_bmk_util_GetAndroidSDKTarget();
BBSTRING _m_bmk_util_NxToolsDir();
void _m_bmk_util_BuildNxNso();
void _m_bmk_util_BuildNxNacp();
void _m_bmk_util_BuildNxNro();
void _m_bmk_util_BuildNxDependencies();
void _m_bmk_util_MakeUpx();
BBSTRING _m_bmk_util_ConcatString(BBSTRING bbt_a1,BBSTRING bbt_a2,BBSTRING bbt_a3,BBSTRING bbt_a4,BBSTRING bbt_a5,BBSTRING bbt_a6,BBSTRING bbt_a7);
struct _m_bmk_util_TBootstrapConfig_obj* _m_bmk_util_LoadBootstrapConfig();
extern void bmx_setfiletimenow(BBSTRING bbt_path);
extern BBBYTE* bmx_hash_createState();
extern void bmx_hash_reset(BBBYTE* bbt_state);
extern void bmx_hash_update(BBBYTE* bbt_state,BBBYTE* bbt_data,BBINT bbt_length);
extern BBSTRING bmx_hash_digest(BBBYTE* bbt_state);
extern void bmx_hash_free(BBBYTE* bbt_state);
void _m_bmk_util_SetFileTimeNow(BBSTRING bbt_path);
BBSTRING _m_bmk_util_CalculateFileHash(BBSTRING bbt_path);

#endif
