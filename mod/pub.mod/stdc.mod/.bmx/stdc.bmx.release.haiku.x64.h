#ifndef PUB_STDC_STDC_BMX_RELEASE_HAIKU_X64_H
#define PUB_STDC_STDC_BMX_RELEASE_HAIKU_X64_H

#include <brl.mod/blitz.mod/.bmx/blitz.bmx.release.haiku.x64.h>
int __bb_pub_stdc_stdc();
struct pub_stdc_TAddrInfo_obj;
struct pub_stdc_TSockaddrStorage_obj;
struct pub_stdc_STimeSpec;
void _pub_stdc_STimeSpec_New_zz(struct pub_stdc_STimeSpec* o,BBSIZET bbt_tv_sec,BBSIZET bbt_tv_nsec);
struct pub_stdc_STimeSpec pub_stdc_STimeSpec_New_zz_ObjectNew(BBSIZET bbt_tv_sec,BBSIZET bbt_tv_nsec);
void _pub_stdc_STimeSpec_New(struct pub_stdc_STimeSpec* o);
struct pub_stdc_STimeSpec pub_stdc_STimeSpec_New_ObjectNew();
BBINT _pub_stdc_STimeSpec_Compare_i_vTSTimeSpec(struct pub_stdc_STimeSpec*,struct pub_stdc_STimeSpec*);
struct pub_stdc_STimeSpec {
	BBSIZET _pub_stdc_stimespec_tv_sec;
	BBSIZET _pub_stdc_stimespec_tv_nsec;
};
extern void bb_stdc_Startup();
extern BBBYTE* stdin_;
extern BBBYTE* stdout_;
extern BBBYTE* stderr_;
void _pub_stdc_TAddrInfo_New(struct pub_stdc_TAddrInfo_obj* o);
void _pub_stdc_TAddrInfo_New_iii(struct pub_stdc_TAddrInfo_obj* o,BBINT bbt_family,BBINT bbt_sockType,BBINT bbt_flags);
struct pub_stdc_TAddrInfo_obj* _pub_stdc_TAddrInfo_New_iii_ObjectNew(BBClass * clas,BBINT bbt_family,BBINT bbt_sockType,BBINT bbt_flags);
void _pub_stdc_TAddrInfo_New_pbi(struct pub_stdc_TAddrInfo_obj* o,BBBYTE* bbt_infoPtr,BBINT bbt_shouldFreeInfo);
struct pub_stdc_TAddrInfo_obj* _pub_stdc_TAddrInfo_New_pbi_ObjectNew(BBClass * clas,BBBYTE* bbt_infoPtr,BBINT bbt_shouldFreeInfo);
void _pub_stdc_TAddrInfo_Delete(struct pub_stdc_TAddrInfo_obj* o);
typedef struct pub_stdc_TAddrInfo_obj* (*pub_stdc_TAddrInfo__Create_f)(BBBYTE*,BBINT);
struct pub_stdc_TAddrInfo_obj* pub_stdc_TAddrInfo__Create(BBBYTE*,BBINT);
typedef BBARRAY (*pub_stdc_TAddrInfo__CreateArray_f)(BBINT);
BBARRAY pub_stdc_TAddrInfo__CreateArray(BBINT);
typedef void (*pub_stdc_TAddrInfo__SetAtIndex_f)(BBARRAY,struct pub_stdc_TAddrInfo_obj*,BBINT);
void pub_stdc_TAddrInfo__SetAtIndex(BBARRAY,struct pub_stdc_TAddrInfo_obj*,BBINT);
typedef BBINT (*pub_stdc_TAddrInfo_flags_m)(struct pub_stdc_TAddrInfo_obj*);
BBINT _pub_stdc_TAddrInfo_flags(struct pub_stdc_TAddrInfo_obj*);
typedef void (*pub_stdc_TAddrInfo_setFlags_i_m)(struct pub_stdc_TAddrInfo_obj*,BBINT);
void _pub_stdc_TAddrInfo_setFlags_i(struct pub_stdc_TAddrInfo_obj*,BBINT);
typedef BBINT (*pub_stdc_TAddrInfo_family_m)(struct pub_stdc_TAddrInfo_obj*);
BBINT _pub_stdc_TAddrInfo_family(struct pub_stdc_TAddrInfo_obj*);
typedef void (*pub_stdc_TAddrInfo_setFamily_i_m)(struct pub_stdc_TAddrInfo_obj*,BBINT);
void _pub_stdc_TAddrInfo_setFamily_i(struct pub_stdc_TAddrInfo_obj*,BBINT);
typedef BBINT (*pub_stdc_TAddrInfo_sockType_m)(struct pub_stdc_TAddrInfo_obj*);
BBINT _pub_stdc_TAddrInfo_sockType(struct pub_stdc_TAddrInfo_obj*);
typedef void (*pub_stdc_TAddrInfo_setSockType_i_m)(struct pub_stdc_TAddrInfo_obj*,BBINT);
void _pub_stdc_TAddrInfo_setSockType_i(struct pub_stdc_TAddrInfo_obj*,BBINT);
typedef BBINT (*pub_stdc_TAddrInfo_protocol_m)(struct pub_stdc_TAddrInfo_obj*);
BBINT _pub_stdc_TAddrInfo_protocol(struct pub_stdc_TAddrInfo_obj*);
typedef void (*pub_stdc_TAddrInfo_setProtocol_i_m)(struct pub_stdc_TAddrInfo_obj*,BBINT);
void _pub_stdc_TAddrInfo_setProtocol_i(struct pub_stdc_TAddrInfo_obj*,BBINT);
typedef BBINT (*pub_stdc_TAddrInfo_addrLen_m)(struct pub_stdc_TAddrInfo_obj*);
BBINT _pub_stdc_TAddrInfo_addrLen(struct pub_stdc_TAddrInfo_obj*);
typedef BBBYTE* (*pub_stdc_TAddrInfo_addr_m)(struct pub_stdc_TAddrInfo_obj*);
BBBYTE* _pub_stdc_TAddrInfo_addr(struct pub_stdc_TAddrInfo_obj*);
typedef BBSTRING (*pub_stdc_TAddrInfo_canonName_m)(struct pub_stdc_TAddrInfo_obj*);
BBSTRING _pub_stdc_TAddrInfo_canonName(struct pub_stdc_TAddrInfo_obj*);
typedef BBSTRING (*pub_stdc_TAddrInfo_HostName_m)(struct pub_stdc_TAddrInfo_obj*);
BBSTRING _pub_stdc_TAddrInfo_HostName(struct pub_stdc_TAddrInfo_obj*);
typedef BBSTRING (*pub_stdc_TAddrInfo_HostIp_m)(struct pub_stdc_TAddrInfo_obj*);
BBSTRING _pub_stdc_TAddrInfo_HostIp(struct pub_stdc_TAddrInfo_obj*);
struct BBClass_pub_stdc_TAddrInfo {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	pub_stdc_TAddrInfo__Create_f f__Create_TTAddrInfo_pbi;
	pub_stdc_TAddrInfo__CreateArray_f f__CreateArray_aTTAddrInfo_i;
	pub_stdc_TAddrInfo__SetAtIndex_f f__SetAtIndex_v_aTTAddrInfoTTAddrInfoi;
	pub_stdc_TAddrInfo_flags_m m_flags;
	pub_stdc_TAddrInfo_setFlags_i_m m_setFlags_i;
	pub_stdc_TAddrInfo_family_m m_family;
	pub_stdc_TAddrInfo_setFamily_i_m m_setFamily_i;
	pub_stdc_TAddrInfo_sockType_m m_sockType;
	pub_stdc_TAddrInfo_setSockType_i_m m_setSockType_i;
	pub_stdc_TAddrInfo_protocol_m m_protocol;
	pub_stdc_TAddrInfo_setProtocol_i_m m_setProtocol_i;
	pub_stdc_TAddrInfo_addrLen_m m_addrLen;
	pub_stdc_TAddrInfo_addr_m m_addr;
	pub_stdc_TAddrInfo_canonName_m m_canonName;
	pub_stdc_TAddrInfo_HostName_m m_HostName;
	pub_stdc_TAddrInfo_HostIp_m m_HostIp;
};

struct pub_stdc_TAddrInfo_obj {
	struct BBClass_pub_stdc_TAddrInfo* clas;
	BBBYTE* _pub_stdc_taddrinfo_infoptr;
	BBINT _pub_stdc_taddrinfo_shouldfreeinfo;
};
extern struct BBClass_pub_stdc_TAddrInfo pub_stdc_TAddrInfo;
void _pub_stdc_TSockaddrStorage_New(struct pub_stdc_TSockaddrStorage_obj* o);
void _pub_stdc_TSockaddrStorage_Delete(struct pub_stdc_TSockaddrStorage_obj* o);
typedef BBINT (*pub_stdc_TSockaddrStorage_family_m)(struct pub_stdc_TSockaddrStorage_obj*);
BBINT _pub_stdc_TSockaddrStorage_family(struct pub_stdc_TSockaddrStorage_obj*);
typedef BBSTRING (*pub_stdc_TSockaddrStorage_address_m)(struct pub_stdc_TSockaddrStorage_obj*);
BBSTRING _pub_stdc_TSockaddrStorage_address(struct pub_stdc_TSockaddrStorage_obj*);
struct BBClass_pub_stdc_TSockaddrStorage {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	pub_stdc_TSockaddrStorage_family_m m_family;
	pub_stdc_TSockaddrStorage_address_m m_address;
};

struct pub_stdc_TSockaddrStorage_obj {
	struct BBClass_pub_stdc_TSockaddrStorage* clas;
	BBBYTE* _pub_stdc_tsockaddrstorage_storageptr;
};
extern struct BBClass_pub_stdc_TSockaddrStorage pub_stdc_TSockaddrStorage;
extern BBINT getchar_();
extern BBINT puts_(BBSTRING bbt_str);
extern BBINT putenv_(BBSTRING bbt_str);
extern BBSTRING getenv_(BBSTRING bbt_env);
extern BBBYTE* fopen_(BBSTRING bbt_file,BBSTRING bbt_Mode);
extern BBINT fseek_(BBBYTE* bbt_c_stream,BBLONG bbt_offset,BBINT bbt_origin);
extern BBLONG ftell_(BBBYTE* bbt_c_stream);
extern BBINT fputs_(BBSTRING bbt_str,BBBYTE* bbt_c_stream);
extern BBINT ftruncate_(BBBYTE* bbt_c_stream,BBLONG bbt_size);
extern BBINT chdir_(BBSTRING bbt_dir);
extern BBSTRING getcwd_();
extern BBINT chmod_(BBSTRING bbt_path,BBINT bbt_Mode);
extern BBINT mkdir_(BBSTRING bbt_path,BBINT bbt_Mode);
extern BBINT rmdir_(BBSTRING bbt_path);
extern BBINT rename_(BBSTRING bbt_from_path,BBSTRING bbt_to_path);
extern void remove_(BBSTRING bbt_path);
extern BBBYTE* opendir_(BBSTRING bbt_path);
extern BBINT closedir_(BBBYTE* bbt_dir);
extern BBSTRING readdir_(BBBYTE* bbt_dir);
extern BBINT stat_(BBSTRING bbt_path,BBINT* bbt_st_mode,BBLONG* bbt_st_size,BBINT* bbt_st_mtime,BBINT* bbt_st_ctime);
extern BBINT system_(BBSTRING bbt_cmd);
extern BBDOUBLE sin(BBDOUBLE bbt_n);
extern BBDOUBLE cos(BBDOUBLE bbt_n);
extern BBDOUBLE tan(BBDOUBLE bbt_n);
extern BBDOUBLE sinh(BBDOUBLE bbt_n);
extern BBDOUBLE cosh(BBDOUBLE bbt_n);
extern BBDOUBLE tanh(BBDOUBLE bbt_n);
extern BBDOUBLE asin(BBDOUBLE bbt_n);
extern BBDOUBLE acos(BBDOUBLE bbt_n);
extern BBDOUBLE atan(BBDOUBLE bbt_n);
extern BBINT htons_(BBINT bbt_n);
extern BBINT ntohs_(BBINT bbt_n);
extern BBINT htonl_(BBINT bbt_n);
extern BBINT ntohl_(BBINT bbt_n);
extern BBINT socket_(BBINT bbt_addr_type,BBINT bbt_comm_type,BBINT bbt_protocol);
extern void closesocket_(BBINT bbt_socket);
extern BBINT bind_(BBINT bbt_socket,BBINT bbt_addr_type,BBINT bbt_port);
extern BBBYTE* gethostbyaddr_(BBBYTE* bbt_addr,BBINT bbt_addr_len,BBINT bbt_addr_type);
extern BBARRAY getaddrinfo_(BBSTRING bbt_name,BBSTRING bbt_service,BBINT bbt_family);
extern BBARRAY getaddrinfo_hints(BBSTRING bbt_name,BBSTRING bbt_service,BBBYTE* bbt_hints);
extern BBINT connect_(BBINT bbt_socket,BBBYTE* bbt_addrinfo);
extern BBINT listen_(BBINT bbt_socket,BBINT bbt_backlog);
extern BBINT accept_(BBINT bbt_socket,BBBYTE* bbt_addr,BBBYTE* bbt_addr_len);
extern BBINT select_(BBINT bbt_n_read,BBINT* bbt_read_socks,BBINT bbt_n_write,BBINT* bbt_write_socks,BBINT bbt_n_except,BBINT* bbt_except_socks,BBINT bbt_millis);
extern BBINT sendto_(BBINT bbt_socket,BBBYTE* bbt_buf,BBINT bbt_size,BBINT bbt_flags,BBBYTE* bbt_dest_ip,BBINT bbt_dest_port,BBINT bbt_addr_type);
extern BBLONG send_(BBINT bbt_socket,BBBYTE* bbt_buf,BBSIZET bbt_size,BBINT bbt_flags);
extern BBLONG recv_(BBINT bbt_socket,BBBYTE* bbt_buf,BBSIZET bbt_size,BBINT bbt_flags);
extern BBINT recvfrom_(BBINT bbt_socket,BBBYTE* bbt_buf,BBINT bbt_size,BBINT bbt_flags,BBINT* bbt_sender_ip,BBINT* bbt_sender_port);
extern BBINT setsockopt_(BBINT bbt_socket,BBINT bbt_level,BBINT bbt_optname,BBBYTE* bbt_optval,BBINT bbt_count);
extern BBINT getsockopt_(BBINT bbt_socket,BBINT bbt_level,BBINT bbt_optname,BBBYTE* bbt_optval,BBINT* bbt_count);
extern BBINT shutdown_(BBINT bbt_socket,BBINT bbt_how);
extern BBINT getsockname_(BBINT bbt_socket,BBBYTE* bbt_addr,BBINT* bbt_addr_len);
extern BBINT getpeername_(BBINT bbt_socket,BBBYTE* bbt_addr,BBINT* bbt_addr_len);
extern void freeaddrinfo_(BBBYTE* bbt_res);
extern BBINT bmx_stdc_addrinfo_flags(BBBYTE* bbt_info);
extern BBINT bmx_stdc_addrinfo_family(BBBYTE* bbt_info);
extern BBINT bmx_stdc_addrinfo_socktype(BBBYTE* bbt_info);
extern BBINT bmx_stdc_addrinfo_protocol(BBBYTE* bbt_info);
extern BBINT bmx_stdc_addrinfo_addrlen(BBBYTE* bbt_info);
extern BBBYTE* bmx_stdc_addrinfo_addr(BBBYTE* bbt_info);
extern BBSTRING bmx_stdc_addrinfo_hostname(BBBYTE* bbt_info,BBINT bbt_flags);
extern BBSTRING bmx_stdc_addrinfo_canonname(BBBYTE* bbt_info);
extern BBINT inet_pton_(BBINT bbt_family,BBSTRING bbt_src,BBBYTE* bbt_dst);
extern BBBYTE* bmx_stdc_addrinfo_new();
extern void bmx_stdc_addrinfo_setflags(BBBYTE* bbt_info,BBINT bbt_flags);
extern void bmx_stdc_addrinfo_setfamily(BBBYTE* bbt_info,BBINT bbt_family);
extern void bmx_stdc_addrinfo_setsocktype(BBBYTE* bbt_info,BBINT bbt_sockType);
extern void bmx_stdc_addrinfo_setprotocol(BBBYTE* bbt_info,BBINT bbt_protocol);
extern BBINT bmx_stdc_bind_info(BBINT bbt_socket,BBBYTE* bbt_info);
extern BBBYTE* bmx_stdc_sockaddrestorage_new();
extern BBSTRING bmx_stdc_sockaddrestorage_address(BBBYTE* bbt_handle);
extern BBINT bmx_stdc_accept_(BBINT bbt_socket,BBBYTE* bbt_storage);
extern BBINT bmx_stdc_getsockname(BBINT bbt_socket,BBINT* bbt_port,BBSTRING* bbt_address);
extern BBINT bmx_stdc_getpeername(BBINT bbt_socket,BBINT* bbt_port,BBSTRING* bbt_address);
extern BBINT time_(BBBYTE* bbt_time);
extern BBBYTE* localtime_(BBBYTE* bbt_time);
extern BBINT strftime_(BBBYTE* bbt_buf,BBINT bbt_size,BBSTRING bbt_fmt,BBBYTE* bbt_time);
extern void clock_gettime_(BBINT bbt_id,struct pub_stdc_STimeSpec* bbt_spec);
extern BBINT errno_();
BBINT pub_stdc_DefaultComparator_Compare(struct pub_stdc_STimeSpec* bbt_o1,struct pub_stdc_STimeSpec* bbt_o2);

#endif
