#ifndef PUB_LUA_LUA_BMX_RELEASE_HAIKU_X64_H
#define PUB_LUA_LUA_BMX_RELEASE_HAIKU_X64_H

#include <brl.mod/blitz.mod/.bmx/blitz.bmx.release.haiku.x64.h>
int __bb_pub_lua_lua();
struct lua_Debug;
struct lua_Reg;
struct lua_Debug {
	BBINT event;
	BBBYTE* name;
	BBBYTE* namewhat;
	BBBYTE* what;
	BBBYTE* source;
	BBINT currentline;
	BBINT nups;
	BBINT linedefined;
	BBINT lastlinedefined;
	BBBYTE short_src;
	BBBYTE short_src_01;
	BBBYTE short_src_02;
	BBBYTE short_src_03;
	BBLONG short_src_04;
	BBLONG short_src_12;
	BBLONG short_src_20;
	BBLONG short_src_28;
	BBLONG short_src_36;
	BBLONG short_src_44;
	BBLONG short_src_52;
	BBINT i_ci;
};
struct lua_Reg {
	BBBYTE* name;
	BBINT(* func)(BBBYTE*);
};
extern BBBYTE* lua_atpanic(BBBYTE* bbt_lua_state,BBINT(* bbt_panicf)(BBBYTE*));
extern void lua_call(BBBYTE* bbt_lua_state,BBINT bbt_nargs,BBINT bbt_nresults);
extern BBINT lua_checkstack(BBBYTE* bbt_lua_state,BBINT bbt_extra);
extern void lua_close(BBBYTE* bbt_lua_state);
extern void lua_concat(BBBYTE* bbt_lua_state,BBINT bbt_n);
extern BBINT lua_cpcall(BBBYTE* bbt_lua_state,BBINT(* bbt_func)(BBBYTE*),BBBYTE* bbt_ud);
extern void lua_createtable(BBBYTE* bbt_lua_state,BBINT bbt_narr,BBINT bbt_nrec);
extern BBINT lua_dump(BBBYTE* bbt_lua_state,BBINT(* bbt_writer)(BBBYTE*,BBBYTE*,BBLONG,BBBYTE*),BBBYTE* bbt_data);
extern BBINT lua_equal(BBBYTE* bbt_lua_state,BBINT bbt_index1,BBINT bbt_index2);
extern BBINT lua_error(BBBYTE* bbt_lua_state);
extern BBINT lua_gc(BBBYTE* bbt_lua_state,BBINT bbt_what,BBINT bbt_data);
extern BBBYTE* lua_getallocf(BBBYTE* bbt_lua_state,BBBYTE** bbt_ud);
extern void lua_getfenv(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_getfield(BBBYTE* bbt_lua_state,BBINT bbt_index,BBBYTE * bbt_k);
extern BBBYTE* lua_gethook(BBBYTE* bbt_lua_state);
extern BBINT lua_gethookcount(BBBYTE* bbt_lua_state);
extern BBINT lua_gethookmask(BBBYTE* bbt_lua_state);
extern BBINT lua_getinfo(BBBYTE* bbt_lua_state,BBBYTE * bbt_what,struct lua_Debug* bbt_ar);
extern BBBYTE * lua_getlocal(BBBYTE* bbt_lua_state,struct lua_Debug* bbt_ar,BBINT bbt_n);
extern BBINT lua_getmetatable(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_getstack(BBBYTE* bbt_lua_state,BBINT bbt_level,struct lua_Debug* bbt_ar);
extern void lua_gettable(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_gettop(BBBYTE* bbt_lua_state);
extern BBBYTE * lua_getupvalue(BBBYTE* bbt_lua_state,BBINT bbt_funcindex,BBINT bbt_n);
extern void lua_insert(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_iscfunction(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_isnumber(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_isstring(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_isuserdata(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_lessthan(BBBYTE* bbt_lua_state,BBINT bbt_index1,BBINT bbt_index2);
extern BBINT lua_load(BBBYTE* bbt_lua_state,BBBYTE*(* bbt_reader)(BBBYTE*,BBBYTE*,BBLONG*),BBBYTE* bbt_data,BBBYTE * bbt_chunkname);
extern BBBYTE* lua_newstate(BBBYTE*(* bbt_f)(BBBYTE*,BBBYTE*,BBLONG,BBLONG),BBBYTE* bbt_ud);
extern BBBYTE* lua_newthread(BBBYTE* bbt_lua_state);
extern BBBYTE* lua_newuserdata(BBBYTE* bbt_lua_state,BBLONG bbt_size);
extern BBINT lua_next(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBLONG lua_objlen(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_pcall(BBBYTE* bbt_lua_state,BBINT bbt_nargs,BBINT bbt_nresults,BBINT bbt_errfunc);
extern void lua_pushboolean(BBBYTE* bbt_lua_state,BBINT bbt_b);
extern void lua_pushcclosure(BBBYTE* bbt_lua_state,BBINT(* bbt_fn)(BBBYTE*),BBINT bbt_n);
extern void lua_pushinteger(BBBYTE* bbt_lua_state,BBLONG bbt_n);
extern void lua_pushlightuserdata(BBBYTE* bbt_lua_state,BBBYTE* bbt_p);
extern void lua_pushlstring(BBBYTE* bbt_lua_state,BBBYTE* bbt_s,BBLONG bbt_size);
extern void lua_pushnil(BBBYTE* bbt_lua_state);
extern void lua_pushnumber(BBBYTE* bbt_lua_state,BBDOUBLE bbt_n);
extern void lua_pushstring(BBBYTE* bbt_lua_state,BBBYTE * bbt_s);
extern BBINT lua_pushthread(BBBYTE* bbt_lua_state);
extern void lua_pushvalue(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_rawequal(BBBYTE* bbt_lua_state,BBINT bbt_index1,BBINT bbt_index2);
extern void lua_rawget(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_rawgeti(BBBYTE* bbt_lua_state,BBINT bbt_index,BBINT bbt_n);
extern void lua_rawset(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_rawseti(BBBYTE* bbt_lua_state,BBINT bbt_index,BBINT bbt_n);
extern void lua_remove(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_replace(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_resume(BBBYTE* bbt_lua_state,BBINT bbt_narg);
extern void lua_setallocf(BBBYTE* bbt_lua_state,BBBYTE*(* bbt_f)(BBBYTE*,BBBYTE*,BBLONG,BBLONG),BBBYTE* bbt_ud);
extern BBINT lua_setfenv(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_setfield(BBBYTE* bbt_lua_state,BBINT bbt_index,BBBYTE * bbt_k);
extern BBINT lua_sethook(BBBYTE* bbt_lua_state,void(* bbt_f)(BBBYTE*,struct lua_Debug*),BBINT bbt_mask,BBINT bbt_count);
extern BBBYTE * lua_setlocal(BBBYTE* bbt_lua_state,struct lua_Debug* bbt_ar,BBINT bbt_n);
extern BBINT lua_setmetatable(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_settable(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void lua_settop(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE * lua_setupvalue(BBBYTE* bbt_lua_state,BBINT bbt_funcindex,BBINT bbt_n);
extern BBINT lua_status(BBBYTE* bbt_lua_state);
extern BBINT lua_toboolean(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE* lua_tocfunction(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBLONG lua_tointeger(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE* lua_tolstring(BBBYTE* bbt_lua_state,BBINT bbt_index,BBSIZET* bbt_size);
extern BBDOUBLE lua_tonumber(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE* lua_topointer(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE* lua_tothread(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE* lua_touserdata(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBINT lua_type(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern BBBYTE * lua_typename(BBBYTE* bbt_lua_state,BBINT bbt_tp);
extern void lua_xmove(BBBYTE* bbt_fromState,BBBYTE* bbt_toState,BBINT bbt_n);
extern BBINT lua_yield(BBBYTE* bbt_lua_state,BBINT bbt_nresults);
void pub_lua_lua_getglobal(BBBYTE* bbt_lua_state,BBSTRING bbt_name);
BBINT pub_lua_lua_isboolean(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_isfunction(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_islightuserdata(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_isnil(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_isnone(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_isnoneornil(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_istable(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBINT pub_lua_lua_isthread(BBBYTE* bbt_lua_state,BBINT bbt_index);
void pub_lua_lua_newtable(BBBYTE* bbt_lua_state);
void pub_lua_lua_pop(BBBYTE* bbt_lua_state,BBINT bbt_n);
void pub_lua_lua_pushbytearray(BBBYTE* bbt_lua_state,BBARRAY bbt_Buffer);
void pub_lua_lua_pushcfunction(BBBYTE* bbt_lua_state,BBINT(* bbt_fn)(BBBYTE*));
void pub_lua_lua_setglobal(BBBYTE* bbt_lua_state,BBSTRING bbt_name);
void pub_lua_lua_register(BBBYTE* bbt_lua_state,BBSTRING bbt_name,BBINT(* bbt_f)(BBBYTE*));
BBARRAY pub_lua_lua_tobytearray(BBBYTE* bbt_lua_state,BBINT bbt_index);
BBSTRING pub_lua_lua_tostring(BBBYTE* bbt_lua_state,BBINT bbt_index);
extern void luaL_addlstring(BBBYTE* bbt_B,BBBYTE* bbt_s,BBINT bbt_l);
extern void luaL_addsize(BBBYTE* bbt_B,BBINT bbt_size);
extern void luaL_addstring(BBBYTE* bbt_B,BBBYTE * bbt_s);
extern void luaL_addvalue(BBBYTE* bbt_B);
extern BBINT luaL_argerror(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBBYTE * bbt_extramsg);
extern void luaL_buffinit(BBBYTE* bbt_lua_state,BBBYTE* bbt_B);
extern BBINT luaL_callmeta(BBBYTE* bbt_lua_state,BBINT bbt_obj,BBBYTE * bbt_e);
extern void luaL_checkany(BBBYTE* bbt_lua_state,BBINT bbt_narg);
extern BBLONG luaL_checkinteger(BBBYTE* bbt_lua_state,BBINT bbt_narg);
extern BBBYTE* luaL_checklstring(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBINT* bbt_size);
extern BBDOUBLE luaL_checknumber(BBBYTE* bbt_lua_state,BBINT bbt_narg);
extern void luaL_checkstack(BBBYTE* bbt_lua_state,BBINT bbt_sz,BBBYTE * bbt_msg);
extern void luaL_checktype(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBINT bbt_t);
extern BBBYTE* luaL_checkudata(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBBYTE * bbt_tname);
extern BBINT luaL_getmetafield(BBBYTE* bbt_lua_state,BBINT bbt_obj,BBBYTE * bbt_e);
extern BBBYTE * luaL_gsub(BBBYTE* bbt_lua_state,BBBYTE * bbt_s,BBBYTE * bbt_p,BBBYTE * bbt_r);
extern BBINT luaL_loadbuffer(BBBYTE* bbt_lua_state,BBBYTE* bbt_buff,BBINT bbt_sz,BBBYTE * bbt_name);
extern BBINT luaL_loadfile(BBBYTE* bbt_lua_state,BBBYTE * bbt_filename);
extern BBINT luaL_loadstring(BBBYTE* bbt_lua_state,BBBYTE * bbt_s);
extern BBINT luaL_newmetatable(BBBYTE* bbt_lua_state,BBBYTE * bbt_tname);
extern BBBYTE* luaL_newstate();
extern void luaL_openlibs(BBBYTE* bbt_lua_state);
extern BBLONG luaL_optinteger(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBLONG bbt_d);
extern BBBYTE* luaL_optlstring(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBBYTE * bbt_d,BBINT* bbt_size);
extern BBDOUBLE luaL_optnumber(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBDOUBLE bbt_d);
extern BBBYTE* luaL_prepbuffer(BBBYTE* bbt_B);
extern void luaL_pushresult(BBBYTE* bbt_B);
extern BBINT luaL_ref(BBBYTE* bbt_lua_state,BBINT bbt_t);
extern void luaL_register(BBBYTE* bbt_lua_state,BBBYTE * bbt_libname,struct lua_Reg* bbt_l);
extern BBINT luaL_typerror(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBBYTE * bbt_tname);
extern void luaL_unref(BBBYTE* bbt_lua_state,BBINT bbt_t,BBINT bbt_ref);
extern void luaL_where(BBBYTE* bbt_lua_state,BBINT bbt_lvl);
void pub_lua_luaL_addchar(BBBYTE* bbt_B,BBSTRING bbt_c);
void pub_lua_luaL_argcheck(BBBYTE* bbt_lua_state,BBINT bbt_cond,BBINT bbt_narg,BBSTRING bbt_extramsg);
BBINT pub_lua_luaL_checkint(BBBYTE* bbt_lua_state,BBINT bbt_narg);
BBLONG pub_lua_luaL_checklong(BBBYTE* bbt_lua_state,BBINT bbt_narg);
BBSTRING pub_lua_luaL_checkstring(BBBYTE* bbt_lua_state,BBINT bbt_narg);
BBINT pub_lua_luaL_dofile(BBBYTE* bbt_lua_state,BBSTRING bbt_filename);
BBINT pub_lua_luaL_dostring(BBBYTE* bbt_lua_state,BBSTRING bbt_str);
void pub_lua_luaL_getmetatable(BBBYTE* bbt_lua_state,BBSTRING bbt_tname);
BBINT pub_lua_luaL_optint(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBINT bbt_d);
BBLONG pub_lua_luaL_optlong(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBLONG bbt_d);
BBSTRING pub_lua_luaL_optstring(BBBYTE* bbt_lua_state,BBINT bbt_narg,BBSTRING bbt_d);
BBSTRING pub_lua_luaL_typename(BBBYTE* bbt_lua_state,BBINT bbt_idx);
extern BBINT luaopen_base(BBBYTE* bbt_lua_state);
extern BBINT luaopen_debug(BBBYTE* bbt_lua_state);
extern BBINT luaopen_io(BBBYTE* bbt_lua_state);
extern BBINT luaopen_math(BBBYTE* bbt_lua_state);
extern BBINT luaopen_os(BBBYTE* bbt_lua_state);
extern BBINT luaopen_package(BBBYTE* bbt_lua_state);
extern BBINT luaopen_string(BBBYTE* bbt_lua_state);
extern BBINT luaopen_table(BBBYTE* bbt_lua_state);
BBINT pub_lua_lua_dobuffer(BBBYTE* bbt_lua_state,BBSTRING bbt_buff,BBINT bbt_sz,BBSTRING bbt_name);
BBINT pub_lua_lua_dofile(BBBYTE* bbt_lua_state,BBSTRING bbt_filename);
BBINT pub_lua_lua_dostring(BBBYTE* bbt_lua_state,BBSTRING bbt_str);
BBLONG pub_lua_lua_strlen(BBBYTE* bbt_lua_state,BBINT bbt_index);

#endif
