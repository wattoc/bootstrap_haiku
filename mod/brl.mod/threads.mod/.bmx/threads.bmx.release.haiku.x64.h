#ifndef BRL_THREADS_THREADS_BMX_RELEASE_HAIKU_X64_H
#define BRL_THREADS_THREADS_BMX_RELEASE_HAIKU_X64_H

#include <brl.mod/blitz.mod/.bmx/blitz.bmx.release.haiku.x64.h>
int __bb_brl_threads_threads();
struct brl_threads_TThread_obj;
struct brl_threads_TThreadData_obj;
struct brl_threads_TMutex_obj;
struct brl_threads_TSemaphore_obj;
struct brl_threads_TCondVar_obj;
void _brl_threads_TThread_New(struct brl_threads_TThread_obj* o);
void _brl_threads_TThread_Delete(struct brl_threads_TThread_obj* o);
typedef void (*brl_threads_TThread_Detach_m)(struct brl_threads_TThread_obj*);
void _brl_threads_TThread_Detach(struct brl_threads_TThread_obj*);
typedef BBOBJECT (*brl_threads_TThread_Wait_m)(struct brl_threads_TThread_obj*);
BBOBJECT _brl_threads_TThread_Wait(struct brl_threads_TThread_obj*);
typedef BBINT (*brl_threads_TThread_Running_m)(struct brl_threads_TThread_obj*);
BBINT _brl_threads_TThread_Running(struct brl_threads_TThread_obj*);
typedef struct brl_threads_TThread_obj* (*brl_threads_TThread_Create_TTThread_F_TObject_TObject_TObject_f)(BBOBJECT(* bbt_entry)(BBOBJECT),BBOBJECT);
struct brl_threads_TThread_obj* brl_threads_TThread_Create_TTThread_F_TObject_TObject_TObject(BBOBJECT(* bbt_entry)(BBOBJECT),BBOBJECT);
typedef struct brl_threads_TThread_obj* (*brl_threads_TThread_Main_TTThread_f)();
struct brl_threads_TThread_obj* brl_threads_TThread_Main_TTThread();
typedef struct brl_threads_TThread_obj* (*brl_threads_TThread_Current_TTThread_f)();
struct brl_threads_TThread_obj* brl_threads_TThread_Current_TTThread();
typedef BBOBJECT (*brl_threads_TThread__EntryStub_TObject_TObject_f)(BBOBJECT);
BBOBJECT brl_threads_TThread__EntryStub_TObject_TObject(BBOBJECT);
struct BBClass_brl_threads_TThread {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_threads_TThread_Detach_m m_Detach;
	brl_threads_TThread_Wait_m m_Wait;
	brl_threads_TThread_Running_m m_Running;
	brl_threads_TThread_Create_TTThread_F_TObject_TObject_TObject_f f_Create_TTThread_F_TObject_TObject_TObject;
	brl_threads_TThread_Main_TTThread_f f_Main_TTThread;
	brl_threads_TThread_Current_TTThread_f f_Current_TTThread;
	brl_threads_TThread__EntryStub_TObject_TObject_f f__EntryStub_TObject_TObject;
};

struct brl_threads_TThread_obj {
	struct BBClass_brl_threads_TThread* clas;
	BBINT _brl_threads_tthread__running;
	BBBYTE* _brl_threads_tthread__handle;
	BBOBJECT _brl_threads_tthread__result;
	BBOBJECT(* _brl_threads_tthread__entry)(BBOBJECT);
	BBOBJECT _brl_threads_tthread__data;
};
extern struct BBClass_brl_threads_TThread brl_threads_TThread;
void _brl_threads_TThreadData_New(struct brl_threads_TThreadData_obj* o);
typedef void (*brl_threads_TThreadData_SetValue_TObject_m)(struct brl_threads_TThreadData_obj*,BBOBJECT);
void _brl_threads_TThreadData_SetValue_TObject(struct brl_threads_TThreadData_obj*,BBOBJECT);
typedef BBOBJECT (*brl_threads_TThreadData_GetValue_m)(struct brl_threads_TThreadData_obj*);
BBOBJECT _brl_threads_TThreadData_GetValue(struct brl_threads_TThreadData_obj*);
typedef struct brl_threads_TThreadData_obj* (*brl_threads_TThreadData_Create_TTThreadData_f)();
struct brl_threads_TThreadData_obj* brl_threads_TThreadData_Create_TTThreadData();
struct BBClass_brl_threads_TThreadData {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_threads_TThreadData_SetValue_TObject_m m_SetValue_TObject;
	brl_threads_TThreadData_GetValue_m m_GetValue;
	brl_threads_TThreadData_Create_TTThreadData_f f_Create_TTThreadData;
};

struct brl_threads_TThreadData_obj {
	struct BBClass_brl_threads_TThreadData* clas;
	BBINT _brl_threads_tthreaddata__handle;
};
extern struct BBClass_brl_threads_TThreadData brl_threads_TThreadData;
extern BBINT bbThreadAllocData();
extern void bbThreadSetData(BBINT bbt_index,BBOBJECT bbt_data);
void _brl_threads_TMutex_New(struct brl_threads_TMutex_obj* o);
void _brl_threads_TMutex_Delete(struct brl_threads_TMutex_obj* o);
typedef void (*brl_threads_TMutex_Close_m)(struct brl_threads_TMutex_obj*);
void _brl_threads_TMutex_Close(struct brl_threads_TMutex_obj*);
typedef void (*brl_threads_TMutex_Lock_m)(struct brl_threads_TMutex_obj*);
void _brl_threads_TMutex_Lock(struct brl_threads_TMutex_obj*);
typedef BBINT (*brl_threads_TMutex_TryLock_m)(struct brl_threads_TMutex_obj*);
BBINT _brl_threads_TMutex_TryLock(struct brl_threads_TMutex_obj*);
typedef void (*brl_threads_TMutex_Unlock_m)(struct brl_threads_TMutex_obj*);
void _brl_threads_TMutex_Unlock(struct brl_threads_TMutex_obj*);
typedef struct brl_threads_TMutex_obj* (*brl_threads_TMutex_Create_TTMutex_f)();
struct brl_threads_TMutex_obj* brl_threads_TMutex_Create_TTMutex();
struct BBClass_brl_threads_TMutex {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_threads_TMutex_Close_m m_Close;
	brl_threads_TMutex_Lock_m m_Lock;
	brl_threads_TMutex_TryLock_m m_TryLock;
	brl_threads_TMutex_Unlock_m m_Unlock;
	brl_threads_TMutex_Create_TTMutex_f f_Create_TTMutex;
};

struct brl_threads_TMutex_obj {
	struct BBClass_brl_threads_TMutex* clas;
	BBBYTE* _brl_threads_tmutex__handle;
};
extern struct BBClass_brl_threads_TMutex brl_threads_TMutex;
void _brl_threads_TSemaphore_New(struct brl_threads_TSemaphore_obj* o);
void _brl_threads_TSemaphore_Delete(struct brl_threads_TSemaphore_obj* o);
typedef void (*brl_threads_TSemaphore_Close_m)(struct brl_threads_TSemaphore_obj*);
void _brl_threads_TSemaphore_Close(struct brl_threads_TSemaphore_obj*);
typedef void (*brl_threads_TSemaphore_Wait_m)(struct brl_threads_TSemaphore_obj*);
void _brl_threads_TSemaphore_Wait(struct brl_threads_TSemaphore_obj*);
typedef BBINT (*brl_threads_TSemaphore_TimedWait_i_m)(struct brl_threads_TSemaphore_obj*,BBINT);
BBINT _brl_threads_TSemaphore_TimedWait_i(struct brl_threads_TSemaphore_obj*,BBINT);
typedef void (*brl_threads_TSemaphore_Post_m)(struct brl_threads_TSemaphore_obj*);
void _brl_threads_TSemaphore_Post(struct brl_threads_TSemaphore_obj*);
typedef struct brl_threads_TSemaphore_obj* (*brl_threads_TSemaphore_Create_TTSemaphore_i_f)(BBINT);
struct brl_threads_TSemaphore_obj* brl_threads_TSemaphore_Create_TTSemaphore_i(BBINT);
struct BBClass_brl_threads_TSemaphore {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_threads_TSemaphore_Close_m m_Close;
	brl_threads_TSemaphore_Wait_m m_Wait;
	brl_threads_TSemaphore_TimedWait_i_m m_TimedWait_i;
	brl_threads_TSemaphore_Post_m m_Post;
	brl_threads_TSemaphore_Create_TTSemaphore_i_f f_Create_TTSemaphore_i;
};

struct brl_threads_TSemaphore_obj {
	struct BBClass_brl_threads_TSemaphore* clas;
	BBBYTE* _brl_threads_tsemaphore__handle;
};
extern struct BBClass_brl_threads_TSemaphore brl_threads_TSemaphore;
void _brl_threads_TCondVar_New(struct brl_threads_TCondVar_obj* o);
void _brl_threads_TCondVar_Delete(struct brl_threads_TCondVar_obj* o);
typedef void (*brl_threads_TCondVar_Close_m)(struct brl_threads_TCondVar_obj*);
void _brl_threads_TCondVar_Close(struct brl_threads_TCondVar_obj*);
typedef void (*brl_threads_TCondVar_Wait_TTMutex_m)(struct brl_threads_TCondVar_obj*,struct brl_threads_TMutex_obj*);
void _brl_threads_TCondVar_Wait_TTMutex(struct brl_threads_TCondVar_obj*,struct brl_threads_TMutex_obj*);
typedef BBINT (*brl_threads_TCondVar_TimedWait_TTMutexi_m)(struct brl_threads_TCondVar_obj*,struct brl_threads_TMutex_obj*,BBINT);
BBINT _brl_threads_TCondVar_TimedWait_TTMutexi(struct brl_threads_TCondVar_obj*,struct brl_threads_TMutex_obj*,BBINT);
typedef void (*brl_threads_TCondVar_Signal_m)(struct brl_threads_TCondVar_obj*);
void _brl_threads_TCondVar_Signal(struct brl_threads_TCondVar_obj*);
typedef void (*brl_threads_TCondVar_Broadcast_m)(struct brl_threads_TCondVar_obj*);
void _brl_threads_TCondVar_Broadcast(struct brl_threads_TCondVar_obj*);
typedef struct brl_threads_TCondVar_obj* (*brl_threads_TCondVar_Create_TTCondVar_f)();
struct brl_threads_TCondVar_obj* brl_threads_TCondVar_Create_TTCondVar();
struct BBClass_brl_threads_TCondVar {
	BBClass*  super;
	void      (*free)( BBObject *o );
	BBDebugScope* debug_scope;
	unsigned int instance_size;
	void      (*ctor)( BBOBJECT o );
	void      (*dtor)( BBOBJECT o );
	BBSTRING  (*ToString)( BBOBJECT x );
	int       (*Compare)( BBOBJECT x,BBOBJECT y );
	BBOBJECT  (*SendMessage)( BBOBJECT o,BBOBJECT m,BBOBJECT s );
	BBINTERFACETABLE itable;
	void*     extra;
	unsigned int obj_size;
	unsigned int instance_count;
	unsigned int fields_offset;
	brl_threads_TCondVar_Close_m m_Close;
	brl_threads_TCondVar_Wait_TTMutex_m m_Wait_TTMutex;
	brl_threads_TCondVar_TimedWait_TTMutexi_m m_TimedWait_TTMutexi;
	brl_threads_TCondVar_Signal_m m_Signal;
	brl_threads_TCondVar_Broadcast_m m_Broadcast;
	brl_threads_TCondVar_Create_TTCondVar_f f_Create_TTCondVar;
};

struct brl_threads_TCondVar_obj {
	struct BBClass_brl_threads_TCondVar* clas;
	BBBYTE* _brl_threads_tcondvar__handle;
};
extern struct BBClass_brl_threads_TCondVar brl_threads_TCondVar;
extern BBOBJECT bbThreadGetData(BBINT bbt_index);
extern BBBYTE* threads_CreateThread(BBOBJECT(* bbt_entry)(BBOBJECT),BBOBJECT bbt_data);
extern void threads_DetachThread(BBBYTE* bbt_thread);
extern BBOBJECT threads_WaitThread(BBBYTE* bbt_thread);
extern BBBYTE* threads_CreateMutex();
extern void threads_CloseMutex(BBBYTE* bbt_mutex);
extern void threads_LockMutex(BBBYTE* bbt_mutex);
extern BBINT threads_TryLockMutex(BBBYTE* bbt_mutex);
extern void threads_UnlockMutex(BBBYTE* bbt_mutex);
extern BBBYTE* threads_CreateSemaphore(BBINT bbt_count);
extern void threads_CloseSemaphore(BBBYTE* bbt_sema);
extern void threads_WaitSemaphore(BBBYTE* bbt_sema);
extern void threads_PostSemaphore(BBBYTE* bbt_sema);
extern BBINT threads_TimedWaitSemaphore(BBBYTE* bbt_sema,BBINT bbt_millis);
extern BBBYTE* threads_CreateCond();
extern void threads_WaitCond(BBBYTE* bbt_cond,BBBYTE* bbt_mutex);
extern void threads_SignalCond(BBBYTE* bbt_cond);
extern void threads_BroadcastCond(BBBYTE* bbt_cond);
extern void threads_CloseCond(BBBYTE* bbt_cond);
extern BBINT threads_TimedWaitCond(BBBYTE* bbt_cond,BBBYTE* bbt_mutex,BBINT bbt_millis);
struct brl_threads_TThread_obj* brl_threads_CreateThread(BBOBJECT(* bbt_entry)(BBOBJECT),BBOBJECT bbt_data);
struct brl_threads_TThread_obj* brl_threads_MainThread();
struct brl_threads_TThread_obj* brl_threads_CurrentThread();
void brl_threads_DetachThread(struct brl_threads_TThread_obj* bbt_thread);
BBOBJECT brl_threads_WaitThread(struct brl_threads_TThread_obj* bbt_thread);
BBINT brl_threads_ThreadRunning(struct brl_threads_TThread_obj* bbt_thread);
struct brl_threads_TThreadData_obj* brl_threads_CreateThreadData();
void brl_threads_SetThreadDataValue(struct brl_threads_TThreadData_obj* bbt_data,BBOBJECT bbt_value);
BBOBJECT brl_threads_GetThreadDataValue(struct brl_threads_TThreadData_obj* bbt_data);
struct brl_threads_TMutex_obj* brl_threads_CreateMutex();
void brl_threads_CloseMutex(struct brl_threads_TMutex_obj* bbt_mutex);
void brl_threads_LockMutex(struct brl_threads_TMutex_obj* bbt_mutex);
BBINT brl_threads_TryLockMutex(struct brl_threads_TMutex_obj* bbt_mutex);
void brl_threads_UnlockMutex(struct brl_threads_TMutex_obj* bbt_mutex);
struct brl_threads_TSemaphore_obj* brl_threads_CreateSemaphore(BBINT bbt_count);
void brl_threads_CloseSemaphore(struct brl_threads_TSemaphore_obj* bbt_semaphore);
void brl_threads_WaitSemaphore(struct brl_threads_TSemaphore_obj* bbt_semaphore);
void brl_threads_PostSemaphore(struct brl_threads_TSemaphore_obj* bbt_semaphore);
struct brl_threads_TCondVar_obj* brl_threads_CreateCondVar();
void brl_threads_CloseCondVar(struct brl_threads_TCondVar_obj* bbt_condvar);
void brl_threads_WaitCondVar(struct brl_threads_TCondVar_obj* bbt_condvar,struct brl_threads_TMutex_obj* bbt_mutex);
void brl_threads_SignalCondVar(struct brl_threads_TCondVar_obj* bbt_condvar);
void brl_threads_BroadcastCondVar(struct brl_threads_TCondVar_obj* bbt_condvar);
BBINT brl_threads_CompareAndSwap(BBINT* bbt_target,BBINT bbt_oldValue,BBINT bbt_newValue);
BBINT brl_threads_AtomicAdd(BBINT* bbt_target,BBINT bbt_value);
BBINT brl_threads_AtomicSwap(BBINT* bbt_target,BBINT bbt_value);

#endif
